#!groovy

@Library("Infrastructure@endakelly-patch-1")

def type = "angular"
def product = "darts"
def component = "portal"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
def branchesToSync = ['demo']

withPipeline(type, product, component) {
  enableSlackNotifications('#darts-builds')
  disableCleanupOfHelmReleaseOnFailure()

  afterAlways('smokeTest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/screenshots/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/videos/**/*'
  }

  afterAlways('smokeTest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/screenshots/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/videos/**/*'
  }

  afterAlways('functionalTest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/screenshots/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/videos/**/*'
  }

  afterAlways('functionalTest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/screenshots/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'cypress/videos/**/*'
  }

  syncBranchesWithMaster(branchesToSync)
}
