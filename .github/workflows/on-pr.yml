name: PR Tasks
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

permissions:
  contents: read

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: 'pip-bootstrap-stg-kv'
          secrets: 'b2c-jenkins-tenant-id, b2c-jenkins-client-id, b2c-jenkins-client-secret'
        id: bootstrapKv

      - run: |
          mediaSignInUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/login/return"
          adminSignInUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/login/admin/return"
          adminPasswordResetUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/password-change-confirmation/true"
          mediaPasswordResetUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/password-change-confirmation/false"
          targetAppName="darts-portal-stg"
          azureClientId="${B2C_CLIENT_ID}"
          azureClientSecret="${B2C_CLIENT_PWD}"
          azureTenant="${B2C_TENANT_ID}"
          echo "Login to $azureTenant with $azureClientId"
          az login --service-principal --username $azureClientId -p=$azureClientSecret --tenant $azureTenant --allow-no-subscriptions
          az ad app list --all --filter "displayname eq '${targetAppName}'"
          appId=$(az ad app list --all --filter "displayname eq '${targetAppName}'" --query "[0].appId" -o tsv --only-show-errors )
          appId=${appId//[$'\t\r\n']/}
          echo "App ID $appId"
          az ad app show --id "$appId"
          replyUrls=$(az ad app show --id "$appId" --query "web.redirectUris" -o json --only-show-errors)
          echo "Found Reply URLs"
          echo $replyUrls
          if [[ "${replyUrls}" =~ "${mediaSignInUrl}" && "${replyUrls}" =~ "${adminSignInUrl}" && "${replyUrls}" =~ "${adminPasswordResetUrl}" && "${replyUrls}" =~ "${mediaPasswordResetUrl}" ]]; then
            echo "Reply URLs contain $mediaSignInUrl, $adminSignInUrl, adminPasswordResetUrl and mediaPasswordResetUrl"
          elif [ -z $replyUrls ]; then
            echo "No Reply URLs Found. ISSUE!!"
          else
            readarray -t my_array < <(echo "$replyUrls" | jq -c '.[]')
            for item in "${my_array[@]}"; do
              echo "Url: $item"
              replyUrlString+="$item,"
            done
            if [[ ! "${replyUrls}" =~ "${mediaSignInUrl}" ]]; then
              replyUrlString+="\"$mediaSignInUrl\""
            fi
            if [[ ! "${replyUrls}" =~ "${adminSignInUrl}" ]]; then
              if [[ ! ${replyUrlString: -1} == "," ]]; then
                replyUrlString+=","
              fi
              replyUrlString+="\"$adminSignInUrl\""
            fi
            if [[ ! "${replyUrls}" =~ "${adminPasswordResetUrl}" ]]; then
              if [[ ! ${replyUrlString: -1} == "," ]]; then
                replyUrlString+=","
              fi
              replyUrlString+="\"$adminPasswordResetUrl\""
            fi
            if [[ ! "${replyUrls}" =~ "${mediaPasswordResetUrl}" ]]; then
              if [[ ! ${replyUrlString: -1} == "," ]]; then
                replyUrlString+=","
              fi
              replyUrlString+="\"$mediaPasswordResetUrl\""
            fi
            echo "reply String: $replyUrlString"
            objectId=$(az ad app list --all --filter "displayname eq '${targetAppName}'" --query "[0].id" -o tsv --only-show-errors)
            objectId=${objectId//[$'\t\r\n']/}
            echo "Object ID $objectId"
            restUrl="https://graph.microsoft.com/v1.0/applications/${objectId//[$'\t\r\n']/}"
            echo "Calling: $restUrl"
            az rest --method PATCH --header "Content-Type=application/json" --uri $restUrl --body "{\"web\":{\"redirectUris\":[$replyUrlString]}}" #--debug
        env:
          PR_NUMBER: ${{ github.event.number }}
          B2C_TENANT_ID: ${{ steps.bootstrapKv.outputs.b2c-jenkins-tenant-id }}
          B2C_CLIENT_ID: ${{ steps.bootstrapKv.outputs.b2c-jenkins-client-id }}
          B2C_CLIENT_PWD: ${{ steps.bootstrapKv.outputs.b2c-jenkins-client-secret }}
