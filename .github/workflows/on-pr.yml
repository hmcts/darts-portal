name: PR Tasks
on:
    pull_request:
        types:
            - opened
            - reopened
            - synchronize

permissions:
    id-token: write
    contents: read

jobs:
    deployment:
        runs-on: ubuntu-latest
        #environment: dev
        steps:
            - name: 'Az CLI login'
              uses: azure/login@v2
              with:
                  client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID}}

            - uses: Azure/get-keyvault-secrets@v1
              with:
                  keyvault: 'darts-stg'
                  secrets: 'AzureAdB2CTenantId, AzureAdB2CClientId, AzureAdB2CClientSecret'
              id: dartsStgKV

            - run: |
                  mediaSignInUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/login/return"
                  adminSignInUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/login/admin/return"
                  adminPasswordResetUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/password-change-confirmation/true"
                  mediaPasswordResetUrl="https://darts-portal-pr-${PR_NUMBER}.dev.platform.hmcts.net/password-change-confirmation/false"
                  targetAppName="darts-portal-stg"

                  azureClientId="${B2C_CLIENT_ID}"
                  azureClientSecret="${B2C_CLIENT_PWD}"
                  azureTenant="${B2C_TENANT_ID}"

                  echo "Login to $azureTenant with $azureClientId"
                  az login --service-principal --username $azureClientId -p=$azureClientSecret --tenant $azureTenant --allow-no-subscriptions

                  az ad app list --all --filter "displayname eq '${targetAppName}'"
                  appId=$(az ad app list --all --filter "displayname eq '${targetAppName}'" --query "[0].appId" -o tsv --only-show-errors )
                  appId=${appId//[$'\t\r\n']/}
                  echo "App ID $appId"

                  az ad app show --id "$appId"
                  replyUrls=$(az ad app show --id "$appId" --query "web.redirectUris" -o json --only-show-errors)

                  echo "Found Reply URLs"
                  echo $replyUrls

                  if [[ "${replyUrls}" =~ "${mediaSignInUrl}" && "${replyUrls}" =~ "${adminSignInUrl}" && "${replyUrls}" =~ "${adminPasswordResetUrl}" && "${replyUrls}" =~ "${mediaPasswordResetUrl}" ]]; then
                    echo "Reply URLs contain $mediaSignInUrl, $adminSignInUrl, adminPasswordResetUrl and mediaPasswordResetUrl"
                  elif [ -z $replyUrls ]; then
                    echo "No Reply URLs Found. ISSUE!!"
                  else
                    readarray -t my_array < <(echo "$replyUrls" | jq -c '.[]')
                    for item in "${my_array[@]}"; do
                      echo "Url: $item"
                      replyUrlString+="$item,"
                    done

                    if [[ ! "${replyUrls}" =~ "${mediaSignInUrl}" ]]; then
                      replyUrlString+="\"$mediaSignInUrl\""
                    fi

                    if [[ ! "${replyUrls}" =~ "${adminSignInUrl}" ]]; then
                      if [[ ! ${replyUrlString: -1} == "," ]]; then
                        replyUrlString+=","
                      fi
                      replyUrlString+="\"$adminSignInUrl\""
                    fi

                    if [[ ! "${replyUrls}" =~ "${adminPasswordResetUrl}" ]]; then
                      if [[ ! ${replyUrlString: -1} == "," ]]; then
                        replyUrlString+=","
                      fi
                      replyUrlString+="\"$adminPasswordResetUrl\""
                    fi

                    if [[ ! "${replyUrls}" =~ "${mediaPasswordResetUrl}" ]]; then
                      if [[ ! ${replyUrlString: -1} == "," ]]; then
                        replyUrlString+=","
                      fi
                      replyUrlString+="\"$mediaPasswordResetUrl\""
                    fi

                    echo "reply String: $replyUrlString"

                    objectId=$(az ad app list --all --filter "displayname eq '${targetAppName}'" --query "[0].id" -o tsv --only-show-errors)
                    objectId=${objectId//[$'\t\r\n']/}
                    echo "Object ID $objectId"
                    restUrl="https://graph.microsoft.com/v1.0/applications/${objectId//[$'\t\r\n']/}"
                    echo "Calling: $restUrl"
                    az rest --method PATCH --header "Content-Type=application/json" --uri $restUrl --body "{\"web\":{\"redirectUris\":[$replyUrlString]}}" #--debug
                  fi

              env:
                  PR_NUMBER: ${{ github.event.number }}
                  B2C_TENANT_ID: ${{ steps.dartsStgKV.outputs.AzureADB2CTenneantID }}
                  B2C_CLIENT_ID: ${{ steps.dartsStgKV.outputs.AzureADB2CClientID }}
                  B2C_CLIENT_PWD: ${{ steps.dartsStgKV.outputs.AzureADB2CClientSecret }}
